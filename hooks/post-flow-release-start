#!/bin/sh
#
# Runs at the end of git flow release start
#
# Positional arguments:
# $1    The version (including the version prefix)
# $2    The origin remote
# $3    The full branch name (including the release prefix)
# $4    The base from which this release is started
#
# The following variables are available as they are exported by git-flow:
#
# MASTER_BRANCH - The branch defined as Master
# DEVELOP_BRANCH - The branch defined as Develop
#
VERSION=$1
ORIGIN=$2
BRANCH=$3
BASE=$4

# Implement your script here.
if [ -f ~/.env ]; then
  . ~/.env

  if [ "$TP_USERNAME" != "" ] && [ "$TP_PASSWORD" != "" ] && [ "$TP_URL" != "" ]; then
    # Check if a release exists in TP for the one we are creating. If it does, do nothing.
    result_query="`curl --silent --user $TP_USERNAME:$TP_PASSWORD https://$TP_URL/api/v1/Releases -d "where=Name eq '$VERSION'" --request GET --header "Accept: application/json"`"
    if [ `echo $result_query | egrep -q '"Items": \[\]'; echo $?` -eq 0 ]
    then
      # No release branch exists - create one
      curl --silent --user $TP_USERNAME:$TP_PASSWORD https://$TP_URL/api/v1/Releases --header "Content-Type: application/json" --data "
        {
          Name: '$VERSION',
          StartDate: '`date +"%Y-%m-%d"`',
          EndDate: '`date -d "+30 days" +"%Y-%m-%d"`',
          IsCurrent: false,
          Owner: {
            Id: 1
          },
          Project: {
            Id: 217
          }
        }
      " >> /tmp/git-flow.hooks.log 2>&1
    fi
  fi
fi

exit 0
