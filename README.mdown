# git-flow (KANBAN Edition)

A collection of Git extensions to provide high-level repository operations
for a Kanban style of release management


## Getting started

This is an internal branch to support the desired functionality of the team


## Installing git-flow

Clone the repository. Then, run:

```shell
git clone git@github.com:<username>/gitflow.git
cd gitflow
```
Install the git-flow software by running make.

```shell
git flow init -d
git flow feature start <your feature>
```

Then, do work and commit your changes.

```shell
git flow feature publish <your feature>
```

When done, open a pull request to your feature branch.

## License terms

git-flow is published under the FreeBSD License, see the
[LICENSE](LICENSE) file. Although the FreeBSD License does not require you to
share any modifications you make to the source code, you are very much
encouraged and invited to contribute back your modifications to the community,
preferably in a Github fork, of course.


## git flow usage

### Initialization

To initialize a new repo with the basic branch structure, use:

		git flow init [-d]

This will then interactively prompt you with some questions on which branches
you would like to use as development and production branches, and how you
would like your prefixes be named. You may simply press Return on any of
those questions to accept the (sane) default suggestions.

The ``-d`` flag will accept all defaults.


### Creating feature/release/hotfix/support branches
# TODO:

* To list/start/finish/delete feature branches, use:

  		git flow feature
  		git flow feature start <name> [<base>]
  		git flow feature finish <name>
  		git flow feature delete <name>

  For feature branches, the `<base>` arg must be a branch, when omitted it defaults to the develop branch.

* To push/pull a feature branch to the remote repository, use:

  		git flow feature publish <name>
		git flow feature pull <remote> <name>

* To list/start/finish/delete release branches, use:

  		git flow release
  		git flow release start <release> [<base>]
  		git flow release finish <release>
  		git flow release delete <release>

  For release branches, the `<base>` arg must be a branch, when omitted it defaults to the develop branch.

* To list/start/finish/delete hotfix branches, use:

  		git flow hotfix
  		git flow hotfix start <release> [<base>]
  		git flow hotfix finish <release>
  		git flow hotfix delete <release>

  For hotfix branches, the `<base>` arg must be a branch, when omitted it defaults to the production branch.

* To list/start support branches, use:

  		git flow support
  		git flow support start <release> <base>

  For support branches, the `<base>` arg must be a branch, when omitted it defaults to the production branch.

### Using Hooks and Filters

For a wide variety of commands hooks or filters can called before and after
the command.  
The files should be placed in .git/hooks  
In the directory hooks you can find examples of all the hooks available.

## Still to do:

* Validations
 * Make sure the given names match the correct type (feature/story)

* git flow story ...
  * maybe should automatically create the feature branch if it doesn't exist?
  * probably will have to specify the feature branch to associate with, but if we can think of a better way to do it automatically then that would be ideal.

git flow story finish TP-1234 TP-1235
  * Should merge into feature/TP-1234/develop and delete branch
  * Probably don't have to specify feature - but it might make it faster

git flow feature finish r751-1 TP-1234
  * Should merge into release branch. Kinda weird specifying the release branch since we haven't done that yet.
  * Should either verify all story branches are closed or close all story branches as a part of this action.

